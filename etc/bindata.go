// Code generated by go-bindata.
// sources:
// template/service/genesisService.tem
// DO NOT EDIT!

package etc

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateServiceGenesisserviceTem = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x94\xdf\x6f\xdb\x54\x14\xc7\x9f\x7d\xff\x8a\x23\x3f\x4c\x76\x54\xdd\xb4\xaf\x29\x61\x62\x8b\x84\x2c\x8d\x0a\x51\xe0\x65\x9a\xa8\xe3\x7b\xd3\xde\xd5\x3f\x22\xfb\x66\x51\x89\x2c\x15\xc1\xa4\x81\xe8\x8a\x60\xd0\x0e\x84\xb6\xc2\x86\x78\x69\x32\xd0\x28\x6e\xb2\xc2\x3f\x63\x3b\xce\x13\xff\x02\xba\xb6\x97\x64\x89\x9b\x45\xcb\xd3\x75\xee\xbd\xe7\xfb\x3d\x9f\x7b\xce\x69\xea\xc6\xae\xbe\x4d\xa1\xd3\xc1\xef\x67\x4b\xdf\x47\x88\x59\x4d\xc7\xe5\xa0\x20\x49\xe6\xcc\xa2\x32\x42\x92\xbc\xcd\xf8\x4e\xab\x8e\x0d\xc7\x2a\xdf\x66\xf6\xa7\x3b\xad\xf2\xb6\xe3\x5a\x32\x52\x11\xe2\x7b\xcd\x34\xc2\x26\x75\xef\x30\x83\x6e\xe8\x16\xf5\x7d\xf0\xb8\xdb\x32\x38\x74\x90\xa4\x11\x78\xf9\x63\x36\xcf\x57\x5b\xb7\x3d\xc7\xae\xc8\x8c\xc8\xeb\x22\x50\x45\x6e\xba\xcc\xd2\xdd\xbd\x4f\x76\xe9\x9e\xbc\x85\xa4\xeb\x2e\xd5\x39\xfd\x90\x59\x14\x84\x07\x9c\xae\xf2\x4b\xc6\x78\x4f\x5e\xdf\x42\x92\xe6\x11\x6a\x5e\x16\x5f\xec\xc9\xeb\x84\x36\xf4\x96\xc9\x2b\xab\x5b\x50\x2e\x43\x7c\xdc\x8b\xbe\xf9\x2d\xba\xf7\x78\xf4\xf0\x09\xac\x55\xb2\xc5\x7f\x2f\xbe\x8e\xee\x9e\x85\x83\x1f\x86\x5f\x9d\xc5\xfb\x9f\x8d\x3e\xbf\x08\x83\x7e\x7c\xfa\x6b\x14\x04\xc8\x47\xa8\x5c\x2a\xa1\x12\x68\x35\x88\x9e\x1d\x86\xfd\xfb\xb0\x06\x49\xef\x79\x7c\x7c\x3f\x3e\xfc\x36\xba\xfb\x74\xf4\xe0\x61\xd2\xeb\x21\x28\x95\x51\xa3\x65\x1b\xa0\x38\x50\x9a\x25\xa2\x82\xe6\x6d\x30\x53\x51\xa1\xee\x38\xa6\x00\xe3\x52\xde\x72\x6d\x70\xb0\x46\xe0\x2d\x58\x9b\xc8\xe4\x06\xff\xfe\x73\x38\x38\xcc\x6d\xd6\xa8\x49\x39\x25\xef\x70\x88\x4e\x8f\xe2\xee\x5f\x61\xd0\x1f\x0d\x8e\x93\xee\x93\xd1\x4f\x67\xd1\xfe\x8b\xd7\x4b\xd7\x68\xb1\x74\x0a\xaf\x5a\xcd\xe4\x0b\x9e\xf2\x86\xd3\xf6\xfd\xfc\x7b\xea\x51\x49\x1d\x4a\xe2\xe1\x70\xed\x9a\xb8\x98\x4a\x6f\xd0\xf6\xac\x72\xfe\xa1\x4c\x1d\x57\x67\xfd\xbd\xa2\x30\xf1\x76\xe5\xf2\x53\x1d\x24\x49\xa4\x5e\x01\x52\x5f\x41\x92\x3f\xe1\x16\xfe\xfb\x73\x74\x7a\x3c\xc5\xc2\x5b\xa4\xa5\xc2\xa6\x7e\x87\x2a\x05\x07\x8a\x08\xbe\x24\x57\x70\x1c\x4f\x15\x6b\x35\x2b\xd7\x0d\xa7\xad\xa8\x48\xf2\x30\xa9\xe3\xcb\x54\xd4\x71\xaa\x45\x31\x35\x02\x6f\xc3\xea\x54\x4d\x3c\x3e\x8f\x0f\xba\x5a\x2d\x7e\xf4\x34\xe9\xfd\xb2\x7c\x8e\xef\x52\x7e\x6d\x4f\x23\x0a\x23\xa2\x3b\xd4\xf9\x46\x2d\xce\x09\x2a\xd5\xb9\xa3\x1d\x3f\xcf\xe8\x03\xbd\xad\xc8\x1e\x35\xa9\xc1\xa1\x04\x0d\xd7\xb1\x8a\x52\x00\x0e\xed\x1d\xea\x52\xe0\x98\x11\xa8\xc2\x55\x79\x05\x18\x51\xf1\xa6\xa1\xdb\x4a\xd1\xeb\x2e\x04\x32\x4f\x22\xba\x77\x94\x9c\xfc\xfe\x86\x3c\x3c\x85\x11\x0f\x6e\xde\x4a\x99\xdc\xbc\xb5\x24\x95\x1b\xcc\xe3\x82\x8c\xa5\xef\x52\x65\xfe\xd6\x0a\xac\xaa\x48\x62\x0d\x30\xa9\x2d\xe2\xab\xa2\xad\x45\xa8\x05\x79\x89\x90\xa2\x88\xdf\x9c\x2c\xb3\x41\xb9\xaa\x42\x4a\xd7\x5b\x80\x57\x28\x2d\x44\x9c\x5a\x19\x63\x1e\x0e\x1e\x25\xdd\x93\x78\x7f\x10\x7f\xff\x6c\x3c\x7d\xc2\xe0\x20\x0c\xfa\x76\xcb\x34\x97\x27\x7e\xdd\x69\xd9\x5c\x51\xd3\xe1\xdc\x41\x92\x21\x3e\x3f\x76\x04\xc6\xd5\x3c\xeb\xf7\x1c\x42\xcd\x59\xcf\xa2\xde\x54\x9c\x5d\xbe\x92\x5f\x9a\xd8\xcf\xff\x98\xd8\x4d\x2e\x7a\xd9\xa8\x1c\x7b\x4d\xba\xff\x0c\x2f\xba\x61\xd0\x8f\x2e\xbe\x8b\xbe\x3c\x88\x8f\xce\x46\x47\xcf\x97\xb7\x9d\xc5\x79\xb5\x77\x72\xbf\xd9\x56\x81\x61\x8d\x54\x80\x11\x5f\x9d\x1e\x49\xdd\xf8\xc1\x79\x81\x4e\xd4\x3b\x4f\xfe\x38\x09\x83\xd3\xe1\x8f\x5f\x34\x18\x35\x89\x97\x0d\xf6\xe5\x0d\x7e\xd4\x24\x3a\x2f\x9e\x5f\xf3\x85\x99\x49\x00\xc6\xd8\xe3\x2e\xb3\xb7\x27\xc9\x14\xc2\xcf\xfa\x11\x6f\xa6\x95\xa8\x64\x97\x55\x9c\x2b\x16\xf7\xae\x8f\xfe\x0f\x00\x00\xff\xff\x93\x89\x3d\x55\x4e\x08\x00\x00")

func templateServiceGenesisserviceTemBytes() ([]byte, error) {
	return bindataRead(
		_templateServiceGenesisserviceTem,
		"template/service/genesisService.tem",
	)
}

func templateServiceGenesisserviceTem() (*asset, error) {
	bytes, err := templateServiceGenesisserviceTemBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/service/genesisService.tem", size: 2126, mode: os.FileMode(420), modTime: time.Unix(1542966737, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/service/genesisService.tem": templateServiceGenesisserviceTem,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"service": &bintree{nil, map[string]*bintree{
			"genesisService.tem": &bintree{templateServiceGenesisserviceTem, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

