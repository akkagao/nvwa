// Code generated by go-bindata.
// sources:
// template/service/genesisService.tem
// DO NOT EDIT!

package etc

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateServiceGenesisserviceTem = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x95\xdf\x6f\xdb\x54\x14\xc7\x9f\x7d\xff\x8a\x23\x3f\x4c\x76\x54\xdd\xb4\xaf\x29\x61\x62\x8b\x84\x2c\x8d\x0a\x51\xe0\x65\x9a\xa8\xe3\x7b\xd3\xde\xd5\x3f\x22\xfb\x66\x51\x89\x2c\x15\xc1\xa4\x82\xe8\x8a\x60\xd0\x8e\x09\x6d\x85\x0d\xf1\xd2\x64\xa0\x51\xdc\x64\x85\x7f\xc6\x76\x9c\x27\xfe\x05\x74\x6d\x2f\xc9\x1a\x37\x44\xed\xd3\x75\xef\x3d\xe7\xfb\x3d\x9f\x7b\xee\x49\x53\x37\xb6\xf5\x4d\x0a\x9d\x0e\x7e\x3f\x5b\xfa\x3e\x42\xcc\x6a\x3a\x2e\x07\x05\x49\x32\x67\x16\x95\x11\x92\xe4\x4d\xc6\xb7\x5a\x75\x6c\x38\x56\xf9\x2e\xb3\x3f\xdd\x6a\x95\x37\x1d\xd7\x92\x91\x8a\x10\xdf\x69\xa6\x19\xd6\xa9\x7b\x8f\x19\x74\x4d\xb7\xa8\xef\x83\xc7\xdd\x96\xc1\xa1\x83\x24\x8d\xc0\xeb\x3f\x66\xf3\x7c\xb5\x71\xd7\x73\xec\x8a\xcc\x88\xbc\x2a\x12\x55\xe4\xa6\xcb\x2c\xdd\xdd\xf9\x64\x9b\xee\xc8\x1b\xe5\x32\x68\x35\x24\xdd\x74\xa9\xce\xe9\x87\xcc\xa2\x20\x8c\xe0\x74\x95\x47\x1a\xe3\x3d\x79\x75\x03\xca\x65\x88\xf6\x1e\x47\x83\x7e\x7c\x78\x3a\x3a\x7c\x89\x24\xcd\x23\xd4\xbc\x4c\x54\xec\xc9\xab\x84\x36\xf4\x96\xc9\x2b\xcb\x69\x78\x7c\xd4\x8b\xbe\xf9\x35\xda\x7b\x3a\x7a\xf4\x0c\x56\x2a\xd9\xe2\xdf\x57\x5f\x47\xf7\x4f\xc3\xc1\x0f\xc3\xaf\x4e\xe3\xdd\xcf\x46\x9f\x9f\x87\x41\x3f\x3e\xf9\x25\x0a\x02\xe4\x23\x54\x2e\x95\x50\x09\xb4\x1a\x44\x2f\x0e\xc2\xfe\x03\x58\x81\xa4\xf7\x32\x3e\x7a\x10\x1f\x7c\x1b\xdd\x7f\x3e\x7a\xf8\x28\xe9\xf5\x10\x94\xca\xa8\xd1\xb2\x0d\x50\x1c\x28\x5d\xc4\xa4\x82\xe6\xad\x31\x53\x51\xa1\xee\x38\xa6\xa0\xe5\x52\xde\x72\x6d\x70\xb0\x46\xe0\x2d\x58\x99\xc8\xe4\x06\xff\xfa\x63\x38\x38\xc8\x6d\xd6\xa8\x49\x39\x25\xef\x70\x88\x4e\x0e\xe3\xee\x9f\x61\xd0\x1f\x0d\x8e\x92\xee\xb3\xd1\xe3\xd3\x68\xf7\xd5\xff\x4b\xd7\x68\xb1\x74\x0a\xaf\x5a\xcd\xe4\x0b\xee\xf7\x96\xd3\xf6\xfd\xfc\x7b\xea\xa6\x49\x1d\x4a\xe2\x36\x71\xed\x86\x08\x4c\xa5\xd7\x68\xfb\xa2\x72\xfe\xa1\x4c\x1d\x57\x2f\xfa\x7b\x43\x61\xe2\xed\xda\xe5\xa7\x3a\x48\x92\x48\xbd\x02\xa4\xbe\x84\x24\x7f\xc2\x2d\xfc\xe7\xa7\xe8\xe4\x68\x8a\x85\x37\x4f\x4b\x85\x75\xfd\x1e\x55\x0a\x0e\x14\x11\x7c\x4d\xae\xe0\x38\x9e\x6a\xde\x6a\xd6\xbe\x6b\x4e\x5b\x51\x91\xe4\x61\x52\xc7\x97\xa9\xa8\xe3\x52\x8b\x72\x6a\x04\xde\x86\xe5\xa9\x9e\x78\x7a\x16\xef\x77\xb5\x5a\xfc\xe4\x79\xd2\xfb\x79\xf1\x1a\xdf\xa5\xfc\xc6\x8e\x46\x14\x46\xc4\xeb\x50\x67\x5f\x6f\x71\x4d\x50\xa9\xce\x1c\xed\xf8\x79\x45\x1f\xe8\x6d\x45\xf6\xa8\x49\x0d\x0e\x25\x68\xb8\x8e\x55\x54\x02\x70\x68\x6f\x51\x97\x02\xc7\x8c\x40\x15\xae\xcb\x4b\xc0\x88\x8a\xd7\x0d\xdd\x56\x8a\x6e\x77\x2e\x90\x59\x12\xd1\xde\x61\x72\xfc\xdb\x15\x79\x78\x0a\x23\x1e\xdc\xbe\x93\x32\xb9\x7d\x67\x41\x2a\xb7\x98\xc7\x05\x19\x4b\xdf\xa6\xca\x6c\xd4\x12\x2c\xab\x48\x62\x0d\x30\xa9\x2d\xf2\xab\xe2\x59\x8b\x54\x73\xea\x12\x29\x45\x13\x5f\x9d\x2c\xb3\x41\xb9\xae\x42\x4a\xd7\x9b\x83\x57\x28\xcd\x45\x9c\x5a\x19\x63\x1e\x0e\x9e\x24\xdd\xe3\x78\x77\x10\x7f\xff\x62\x3c\x7d\xc2\x60\x3f\x0c\xfa\x76\xcb\x34\x17\x27\x7e\xd3\x69\xd9\x5c\x51\xd3\xe1\xdc\x41\x92\x21\x3e\x3f\x76\x04\xc6\xe5\xbc\xea\xf7\x1c\x42\xcd\x8b\x9e\x45\xbf\xa9\x38\x0b\xbe\x96\x07\x4d\xec\xe7\xff\x98\xd8\x4d\xce\x7b\xd9\xa8\x1c\x7b\x4d\xba\x7f\x0f\xcf\xbb\x61\xd0\x8f\xce\xbf\x8b\xbe\xdc\xcf\x7f\x2e\x16\xb6\x9d\xe5\x79\xf3\xed\xe4\x7e\xb3\xad\x02\xc3\x1a\xa9\x00\x23\xbe\x3a\x3d\x92\xba\xf1\xc3\xb3\x02\x9d\xa8\x77\x96\xfc\x7e\x1c\x06\x27\xc3\x1f\xbf\x68\x30\x6a\x12\x2f\x1b\xec\x8b\x1b\xfc\xa8\x49\x74\x5e\x3c\xbf\x66\x1b\x33\x93\x00\x8c\xb1\xc7\x5d\x66\x6f\x4e\x8a\x29\x84\x9f\xbd\x47\xbc\x9e\x76\xa2\x92\x05\xab\x38\x57\x2c\x7e\xbb\x3e\xfa\x2f\x00\x00\xff\xff\xee\x19\xd2\xfa\x63\x08\x00\x00")

func templateServiceGenesisserviceTemBytes() ([]byte, error) {
	return bindataRead(
		_templateServiceGenesisserviceTem,
		"template/service/genesisService.tem",
	)
}

func templateServiceGenesisserviceTem() (*asset, error) {
	bytes, err := templateServiceGenesisserviceTemBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/service/genesisService.tem", size: 2147, mode: os.FileMode(420), modTime: time.Unix(1542967228, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/service/genesisService.tem": templateServiceGenesisserviceTem,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"service": &bintree{nil, map[string]*bintree{
			"genesisService.tem": &bintree{templateServiceGenesisserviceTem, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

