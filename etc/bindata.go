// Code generated by go-bindata.
// sources:
// template/service/genesisService.tem
// template/service/genesisService_test.tem
// DO NOT EDIT!

package etc

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateServiceGenesisserviceTem = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x95\xdf\x6f\x13\x47\x10\xc7\x9f\x6f\xff\x8a\xe9\x3d\xa0\x3b\x0b\x9d\xc3\x6b\x28\x45\x05\x4b\x95\x25\x1a\x55\x4d\xdb\x87\x22\xd4\x9c\xbd\x9b\x64\x89\x7d\x67\xdd\xad\x89\x52\xeb\x24\x37\x01\x1a\x68\x7e\x54\x25\xc8\x21\x4d\x09\x69\x01\x59\x48\xb1\xdd\x8a\x06\xff\x0a\xfd\x63\x7a\x7b\x3e\x3f\xe5\x5f\xa8\xd6\x77\xb1\x4d\x7c\xb8\x16\x7e\xda\xf5\xee\xcc\x7c\xe6\xbb\x33\x73\x39\x3d\xbd\xa4\x2f\x10\x28\x14\xb4\x2f\x82\xa5\xe3\x20\x44\xb3\x39\xd3\x62\xa0\x20\x49\x66\x34\x4b\x64\x84\x24\x79\x81\xb2\xc5\x7c\x4a\x4b\x9b\xd9\xf8\x6d\x6a\x7c\xbf\x98\x8f\x2f\x98\x56\x56\x46\x2a\x42\x6c\x25\xd7\xf3\x30\x4b\xac\x3b\x34\x4d\x66\xf4\x2c\x71\x1c\xb0\x99\x95\x4f\x33\x28\x20\x29\x89\xe1\xec\x47\x0d\x16\xae\xe6\x6e\xdb\xa6\x31\x2d\x53\x2c\x5f\x16\x8e\xa6\xe5\x9c\x45\xb3\xba\xb5\xf2\xdd\x12\x59\x91\xe7\x90\x74\xdd\x22\x3a\x23\x5f\xd1\x2c\x01\xc1\xa0\xf5\x56\xa1\x51\xba\x7f\x26\x5f\x9e\x43\x52\x82\x64\x08\x23\xf8\x53\x06\xa3\x57\xf1\xd9\x99\x3c\x07\xf1\x38\xf0\x97\xab\xde\xd3\x7d\xaf\x7c\xc8\x9f\xfe\xe4\xed\x3f\xe8\x5b\xf2\xa3\x92\x57\xf9\xfb\xb4\xbd\xc1\x2b\x6b\xbc\x76\xdf\xff\xf1\x15\x7f\x58\xf6\xb7\xde\xf0\xb7\x25\xff\xa4\xca\xd7\x9f\x75\x9f\x3c\xe7\x0f\x0f\xfc\xb5\x93\xd3\xf6\x0f\xd0\x5d\xfd\xc3\x6d\xac\xf3\xfd\xb2\x5f\x5b\xeb\xec\x94\x03\x2f\x5e\xe9\xd8\xad\x6f\xba\xed\x3d\xb7\xb5\xe5\x3d\xae\x79\x9b\x15\xde\x7c\xe4\xd6\x8f\xbc\x5a\xdd\x6d\xdc\x0b\x5c\x9c\xb6\x37\xfc\xe2\x86\xb7\x5b\xe5\xdb\xaf\x78\xed\x7e\x10\xb5\x0f\xd1\xd9\xbb\xcb\x8b\x6d\xbf\xf2\xb6\x73\x52\x71\xeb\x4d\x7e\xf2\x88\x3f\xd8\xf4\x4a\xc7\xdd\xd2\xeb\x7f\x8b\xab\xc8\x41\x28\x1e\x8b\xa1\x18\x24\x13\xc0\x6b\xdb\x6e\x73\x0b\x2e\x81\x5f\x7d\xed\xed\x6e\x79\xdb\xbf\xf0\x7b\x2f\xba\x3b\x4f\xfc\x6a\x15\x41\x2c\x8e\xe6\xf3\x46\x1a\x14\x13\x62\xe7\x9f\x45\x85\xa4\x3d\x43\x33\x8a\x0a\x29\xd3\xcc\x88\xd7\xb1\x08\xcb\x5b\x06\x98\x5a\x12\xc3\xc7\x70\x69\x10\x46\x60\xfe\xfc\x92\xbf\xf9\xab\xd3\xda\x0e\xf0\x61\xa0\x74\x80\xee\xd6\x9b\xdd\xd6\xae\x5f\x79\xde\xfd\xf5\x98\x17\xdb\xff\x1f\x3a\x41\x22\x42\x7f\x64\x6a\x7d\xc7\x5a\xd2\xfe\x96\x58\xa6\xa2\x0a\x8e\x88\xc2\xba\x61\x2e\x3b\x4e\xb8\x1f\x2a\x31\x9c\x82\x98\x28\x23\x2d\x71\x4d\x18\xf6\x18\x66\xc8\xf2\x79\x84\x70\xa3\x0c\x5d\x57\xcf\x83\xbe\x13\x61\x00\x79\xe1\xfd\xb7\x0a\x48\x92\x70\x6a\x1a\x70\xea\x22\x92\x9c\x81\x80\xee\x3f\xbf\xf1\xa3\xdd\x21\x51\xec\x71\xb1\x54\x98\xd5\xef\x10\x25\xe2\x42\x94\x94\x67\x12\xda\x1a\x4e\x69\xef\x33\x54\xfb\xf4\x11\x87\xe2\xbd\x3f\x81\xa9\xa1\xf7\x7e\xd6\xf0\x36\x2b\xc9\x84\x77\xf0\xc2\xaf\xfe\x3e\x39\xf6\x67\x84\x5d\x5b\x49\x62\x85\x62\xd1\xde\xea\xe8\x24\x28\x20\x29\x2a\xab\xe9\x2b\x23\x57\x0b\x4e\x98\xd1\x97\xfa\xb2\x22\xdb\x24\x43\xd2\x0c\x62\x30\x6f\x99\xd9\xa8\x14\x80\xc1\xf2\x22\xb1\x08\x30\x8d\x62\xb8\x02\x57\xe5\x8b\x40\xb1\xaa\xcd\xa6\x75\x43\x89\x7a\xb0\xb1\x82\x8c\x2a\xc1\xd7\x4b\xfe\x61\xf9\x03\xf5\xb0\x15\x8a\x6d\xb8\x79\xab\xa7\xc9\xcd\x5b\x13\xaa\x72\x83\xda\x4c\x28\x93\xd5\x97\x88\x32\x6a\x75\x11\xa6\x54\x24\xd1\x79\xc8\x10\x43\xf8\x57\x45\xcb\x0a\x57\x63\xf2\x12\x2e\x45\x5d\x7e\xb8\xb2\xd4\x00\xe5\xaa\x0a\x3d\x75\xed\x31\xf2\x8a\x48\x63\x25\xee\xa1\xf4\x65\xee\xb4\x0e\xfc\xca\xa1\x57\x6c\x79\x8f\x6b\xfd\x01\x20\x66\x68\xbd\x69\xe4\x33\x99\xc9\x15\xbf\x6e\xe6\x0d\xa6\xa8\xbd\xaf\x4b\x01\x49\x69\xb1\xfd\xc6\x14\x32\x4e\x85\x59\x7f\x6e\x62\x92\x39\xcf\x2c\xea\x4d\xd5\x02\xe3\x0b\xa1\xd1\x00\x3f\xfc\x63\x80\xdb\xff\x10\xf4\x59\x23\x47\xf5\xe4\xd8\x81\x9f\x77\x7b\x27\xe4\x0d\x8e\x22\x80\x93\x78\x1a\x28\x76\xd4\xe1\x29\x53\xf1\x76\x1a\x11\x71\x78\xb5\xe1\xff\x79\xe8\xd6\x8f\x3a\x7b\x77\xe7\x29\xc9\x60\x3b\x18\xda\x93\x03\x7e\x9d\xc3\x3a\x8b\x1e\x49\xa3\x85\x19\x84\x00\x4d\xd3\x6c\x66\x51\x63\x61\x90\x4c\xa4\xf8\x41\x3f\x6a\xb3\xbd\x4a\x54\x02\x63\x55\x0b\x23\x46\xf7\xae\x83\xfe\x0b\x00\x00\xff\xff\x44\x4c\xe0\xbf\xaf\x08\x00\x00")

func templateServiceGenesisserviceTemBytes() ([]byte, error) {
	return bindataRead(
		_templateServiceGenesisserviceTem,
		"template/service/genesisService.tem",
	)
}

func templateServiceGenesisserviceTem() (*asset, error) {
	bytes, err := templateServiceGenesisserviceTemBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/service/genesisService.tem", size: 2223, mode: os.FileMode(420), modTime: time.Unix(1542541268, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateServiceGenesisservice_testTem = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x94\xc1\x8e\xda\x30\x10\x86\xcf\xf6\x53\x58\x3e\x54\x4e\x95\x75\x04\x7b\x5b\x69\x0f\x2d\x54\x2b\xaa\x16\xad\xca\x56\x3d\x54\xd5\xca\x24\x93\x60\x25\xb1\x91\x3d\x80\x28\xe2\xdd\x2b\x07\xb3\x50\xaa\x02\xe2\x02\xb6\x27\xf3\xff\xdf\xcc\xc4\x99\xab\xbc\x56\x15\xb0\x56\x35\x8d\x07\xb7\xd4\x39\x50\xaa\xdb\xb9\x75\xc8\x04\x25\x5c\xe9\xa9\x46\xc8\x42\xb8\xfb\xb9\x53\x73\x9d\xe5\xb6\x6d\xad\xe1\x94\xf0\xb2\xc5\xf0\x87\xe0\x51\x9b\x8a\x53\x4a\x78\xa5\x71\xb6\x98\xca\xdc\xb6\x99\xaa\x6b\x55\x29\x9b\x55\x76\x81\xba\xe1\x34\xa1\xb4\x5c\x98\x9c\x8d\x8c\xc6\x17\xf0\xf8\xc9\x2c\x45\xc2\x36\x94\xec\x04\x65\x38\x1f\x58\x53\xea\x4a\x70\x29\x33\x29\xb3\xe0\xe6\xc0\xdb\x85\xcb\xc1\x67\xb9\x35\xe5\x5d\x01\x4b\xb9\x56\x6d\xc3\x13\x4a\x26\xa8\x1c\x0e\xa7\x62\xbf\xfc\x06\x85\xf6\x6f\xbb\xc9\xae\x1e\x91\xd0\x6d\x34\x0e\xa6\xaf\x15\x18\xf0\xda\xc7\xe8\xeb\x44\x2d\x41\x20\x7b\x1f\x6b\x90\x2f\x1d\xd1\x5f\x88\x94\xc4\x1c\xf6\xf0\xc8\x9e\x76\xcb\x0d\x25\x64\xac\x5a\x78\x60\x8c\x0f\x9c\xfa\xbd\xfe\x61\x9b\xb2\xcf\x53\x4a\xc8\xf3\xcc\x1a\x78\x60\xbc\xd7\xbf\x0f\xfb\x2d\x25\xb6\x3e\xca\x8c\xc6\xb2\x33\x7e\x17\x95\x13\x4a\xca\x16\xe5\xb3\xd3\x06\x1b\x23\x6c\x9d\xb2\x18\x91\xa3\xe2\x7c\x01\x4f\x80\x1f\xd7\xa3\xe2\x86\x1a\xf6\x24\x7b\x85\xde\x09\xc5\x1b\x81\x1f\x42\x23\x92\xd3\x68\x37\x55\xf9\xd9\x5b\xf3\x55\x39\x3f\x53\xcd\x3e\x21\xb9\x0a\xd8\x5f\x4b\xfc\x45\x7b\xfc\x3f\xb5\x17\x3f\x7f\x69\x83\x9b\x5e\xca\xfa\x29\xbb\xdf\x5e\x4d\x19\x64\x2f\x90\x0e\xec\xc2\xe0\x45\xcc\x63\xbb\x13\xc6\x9d\xc0\x05\x97\x21\x34\x80\x70\xd5\x0c\x4f\xe4\x8f\x32\x7b\xb7\x4d\xf8\xdc\x0c\xcf\xbf\x0b\xe7\x2a\xfa\x3e\x2f\x14\xde\x72\xab\x4e\x79\xfb\x87\xa7\x64\xb8\x6d\xec\x91\x75\x1f\x1b\x7e\x38\xfe\x50\x14\x0e\xbc\x0f\x11\x03\x2b\x16\xb7\xfc\x9f\x5e\x45\xa6\x98\x96\xb2\x58\xfa\xc4\xa8\x1a\x26\xe8\xb4\xa9\xbc\xe0\xc1\x83\xa7\x8c\xef\x55\x12\x29\xe5\x01\x61\x0c\xab\x0b\xac\xd7\xf5\x76\x0c\xab\xae\x81\x7f\x02\x00\x00\xff\xff\xc8\xe0\x9e\xb1\x7d\x05\x00\x00")

func templateServiceGenesisservice_testTemBytes() ([]byte, error) {
	return bindataRead(
		_templateServiceGenesisservice_testTem,
		"template/service/genesisService_test.tem",
	)
}

func templateServiceGenesisservice_testTem() (*asset, error) {
	bytes, err := templateServiceGenesisservice_testTemBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/service/genesisService_test.tem", size: 1405, mode: os.FileMode(420), modTime: time.Unix(1542540575, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/service/genesisService.tem": templateServiceGenesisserviceTem,
	"template/service/genesisService_test.tem": templateServiceGenesisservice_testTem,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"service": &bintree{nil, map[string]*bintree{
			"genesisService.tem": &bintree{templateServiceGenesisserviceTem, map[string]*bintree{}},
			"genesisService_test.tem": &bintree{templateServiceGenesisservice_testTem, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

